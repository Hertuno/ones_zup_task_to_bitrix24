#Область ПрограммныйИнтерфейс

Процедура ИзмененияФизическихЛиц(Источник, Отказ) Экспорт
	
	ВыгрузкаФизическихЛиц = Константы.Б_ВыгрузкаИзмененийФизическихЛиц.Получить();
	Если НЕ ВыгрузкаФизическихЛиц Тогда 
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат; 
	КонецЕсли;

	Результат = Новый Соответствие;

	ТипВыгрузки	= "Обновление пользователя";
	Настройки	= НастройкиBitrix24(ТипВыгрузки);
	
	Контакты		= Справочники.ФизическиеЛица.КонтактнаяИнформация(Источник.Ссылка);
	ПользовательИД	= ФизическоеЛицоИД(Источник.Ссылка, Настройки, Контакты);
	
	Если НЕ ЗначениеЗаполнено(ПользовательИД) Тогда 
		Возврат; 
	КонецЕсли;
	
	СтруктураПолей = СтруктураПолейПользовательBitrix24(ПользовательИД, Источник, Контакты);
	Результат = OPI_Bitrix24.ИзменитьПользователя(Настройки.URL, СтруктураПолей);

	Если НЕ ТипЗнч(Результат) = Тип("Соответствие") Тогда
		ТекстОшибки		= "Ошибка во время выгрузки в bitrix24 " + ТипВыгрузки;
		ТипЗаписи		= УровеньЖурналаРегистрации.Ошибка;
		Представление	= ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
		ЗаписьЖурналаРегистрации(ТекстОшибки, ТипЗаписи,,, Представление);
	Иначе
		ТекстОшибки = "Ошибка во время выгрузки в bitrix24";
		Если Результат["error_description"] <> Неопределено Тогда
			ТекстОшибки =  ТекстОшибки + ": " + Результат["error_description"];
		КонецЕсли;
		ТипЗаписи		= УровеньЖурналаРегистрации.Ошибка;
		Представление	= ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
		ЗаписьЖурналаРегистрации(ТекстОшибки, ТипЗаписи,,, Представление);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменениеСотрудниковПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Источник.ДополнительныеСвойства.Вставить("РанееБылПроведен", Источник.Проведен);
КонецПроцедуры

Процедура ИзменениеСотрудниковОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если НЕ Константы.Б_ВыгрузкаИзмененийСотрудников.Получить()	
		ИЛИ	Источник.ДополнительныеСвойства.РанееНеБылПроведен
		ИЛИ СтрНачинаетсяС(НРег(Источник.Номер), "проб") Тогда
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда 
		Возврат; 
	КонецЕсли;

	ТипВыгрузки	= "Заявка в ИТ отдел";
	Настройки	= НастройкиBitrix24(ТипВыгрузки);
	
	СтруктурыСотрудников = СотрудникиИсточника(Источник, ОснованиеЗадачи(Источник));
	
	Для Каждого СтруктураСотрудника Из СтруктурыСотрудников Цикл
		
		Пользователь	= Пользователи.ТекущийПользователь();
		ФизическоеЛицо	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
		Контакты		= Справочники.ФизическиеЛица.КонтактнаяИнформация(ФизическоеЛицо);
		Инициатор		= ФизическоеЛицоИД(ФизическоеЛицо, Настройки, Контакты);
		ТипОснования	= ОснованиеЗадачи(Источник);
		СтруктураПолей	= СтруктураПолейСмартЭлементBitrix24(СтруктураСотрудника, Инициатор, ТипОснования, Источник, Контакты);
		Результат		= OPI_Bitrix24.СоздатьСмартЭлемент(Настройки.URL, Настройки.СмартПроцессИД, СтруктураПолей);
		
		Если НЕ ТипЗнч(Результат) = Тип("Соответствие") Тогда
			ТекстОшибки		= "Ошибка во время выгрузки в bitrix24 " + ТипВыгрузки;
			ТипЗаписи		= УровеньЖурналаРегистрации.Ошибка;
			Представление	= ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
			ЗаписьЖурналаРегистрации(ТекстОшибки, ТипЗаписи,,, Представление);
			Продолжить;
		КонецЕсли;
		
		Если ТипОснования = "Увольнение" Тогда
			
			СтруктураПолей = СтруктураПолейЗадача(СтруктураСотрудника, Инициатор, ТипОснования, Источник);
			Результат = OPI_Bitrix24.СоздатьЗадачу(Настройки.URL, СтруктураПолей);
		
			Если НЕ ТипЗнч(Результат) = Тип("Соответствие") Тогда
				ТекстОшибки		= "Ошибка во время выгрузки в bitrix24 " + ТипВыгрузки;
				ТипЗаписи		= УровеньЖурналаРегистрации.Ошибка;
				Представление	= ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
				ЗаписьЖурналаРегистрации(ТекстОшибки, ТипЗаписи, , , Представление);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсутствиеСотрудниковПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Источник.ДополнительныеСвойства.Вставить("РанееБылПроведен", Источник.Проведен);
КонецПроцедуры

Процедура ОтсутствиеСотрудниковОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт

	Если НЕ Константы.Б_ВыгрузкаОтсутствийСотрудников.Получить()
		ИЛИ Источник.ДополнительныеСвойства.РанееБылПроведен
		ИЛИ СтрНачинаетсяС(НРег(Источник.Номер), "проб") Тогда 
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда 
		Возврат; 
	КонецЕсли;

	ОтсутствияИсточника = Новый Массив;
	ОтсутствияИсточника.Добавить(Источник);	
	
	ТипВыгрузки	= "Календарь отсутствий";
	Настройки	= НастройкиBitrix24(ТипВыгрузки);
	
	Если ЗначениеЗаполнено(ТипыОтсутствий()[ТипЗнч(Источник)]) Тогда
		ТипОтсутствия = ТипыОтсутствий()[ТипЗнч(Источник)];
	Иначе
		ТипОтсутствия = "Другое";
	КонецЕсли;
	
	МассивОтсутствий = МассивОтсутствий(ОтсутствияИсточника);
	Для Каждого Отсутствие Из МассивОтсутствий Цикл
		
		Если ТипЗнч(Отсутствие.Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
    		ФизическоеЛицо = Отсутствие.Сотрудник.ФизическоеЛицо;
		Иначе
		    ФизическоеЛицо = Отсутствие.Сотрудник;
		КонецЕсли;
		
		Контакты = Справочники.ФизическиеЛица.КонтактнаяИнформация(ФизическоеЛицо);
		ПользовательИД = ФизическоеЛицоИД(ФизическоеЛицо, Настройки, Контакты);
		
		ФИО				= СтрШаблон("%1 %2 %3", ФизическоеЛицо.Фамилия, ФизическоеЛицо.Имя, ФизическоеЛицо.Отчество);
		Период			= СтрШаблон("с %1 по %2", Отсутствие.Начало, КонецДня(Отсутствие.Конец));
		НазваниеСобытия	= СтрШаблон("%1 %2 %3", ТипОтсутствия, ФИО, Период);

		СоответствиеПолей = СоответствиеНаимнованияПолей();
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить(СоответствиеПолей["ИДСотрудника"],		ПользовательИД);
		СтруктураПолей.Вставить(СоответствиеПолей["Фамилия"],			ФизическоеЛицо.Фамилия);
		СтруктураПолей.Вставить(СоответствиеПолей["Имя"],				ФизическоеЛицо.Имя);
		СтруктураПолей.Вставить(СоответствиеПолей["Отчество"],			ФизическоеЛицо.Отчество);
		СтруктураПолей.Вставить(СоответствиеПолей["ТипОтсутствия"],		ТипОтсутствия);
		СтруктураПолей.Вставить(СоответствиеПолей["Начало"],			Отсутствие.Начало);
		СтруктураПолей.Вставить(СоответствиеПолей["Конец"],				КонецДня(Отсутствие.Конец));
		СтруктураПолей.Вставить(СоответствиеПолей["НазваниеСобытия"],	НазваниеСобытия);
		
		OPI_Bitrix24.СоздатьСмартЭлемент(Настройки.URL, Настройки.СмартПроцессИД, СтруктураПолей);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТипыОтсутствий()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Тип("ДокументОбъект.Отпуск"),					"Отпуск");
	Результат.Вставить(Тип("ДокументОбъект.Командировка"),				"Командировка");
	Результат.Вставить(Тип("ДокументОбъект.БольничныйЛист"),			"Больничный");
	Результат.Вставить(Тип("ДокументОбъект.ОтпускПоУходуЗаРебенком"),	"Декрет");
	
	Возврат Результат;
	
КонецФункции

Функция ФильтрПоЭлектроннойПочте(КонтактнаяИнформация)

	Результат = Новый Структура;
	
	ВидыКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации;
	
	ПочтаСотрудника = КонтактнаяИнформация[ВидыКонтактнойИнформации.EMailФизическиеЛица];
	Если ЗначениеЗаполнено(ПочтаСотрудника) Тогда
		Результат.Вставить("EMAIL", ПочтаСотрудника);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НастройкиBitrix24(Операция)
	
	Результат = Новый Структура("URL, СмартПроцессИД");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Б_Настройки.URL КАК URL,
		|	Б_Настройки.СмартПроцессИД КАК СмартПроцессИД
		|ИЗ
		|	РегистрСведений.Б_Настройки КАК Б_Настройки
		|ГДЕ
		|	Б_Настройки.Операция = &Операция";
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ОснованиеЗадачи(Источник)
	
	Результат = "";

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПриемНаРаботу")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПриемНаРаботуСписком") Тогда
		Результат = "Прием";
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КадровыйПеревод")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.КадровыйПереводСписком") Тогда
		Результат = "Перевод";
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.Увольнение")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.УвольнениеСписком") Тогда
		Результат = "Увольнение";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СотрудникиИсточника(Источник, ОснованиеЗадачи)
	
	Результат = Новый Массив;
	 
	ТипыСоСписком = Новый Массив;
	ТипыСоСписком.Добавить(Тип("ДокументОбъект.ПриемНаРаботуСписком"));
	ТипыСоСписком.Добавить(Тип("ДокументОбъект.КадровыйПереводСписком"));
	ТипыСоСписком.Добавить(Тип("ДокументОбъект.УвольнениеСписком"));
	
	РеквизитДатыОснования = Новый Соответствие;
	РеквизитДатыОснования.Вставить("Прием",			"ДатаПриема");
	РеквизитДатыОснования.Вставить("Перевод",		"ДатаНачала");
	РеквизитДатыОснования.Вставить("Увольнение",	"ДатаУвольнения");
	
	ДатаОснования = Источник[РеквизитДатыОснования[ОснованиеЗадачи]];
	
	Если ТипыСоСписком.Найти(ТипЗнч(Источник)) <> Неопределено Тогда
		МассивСотрудников = Источник.Сотрудники.ВыгрузитьКолонку("Сотрудник");
	Иначе
		МассивСотрудников = Новый Массив;
		МассивСотрудников.Добавить(Источник.Сотрудник);
	КонецЕсли;
	
	Для Каждого СтрокаИстории Из КадроваяИстория(МассивСотрудников) Цикл
		
		СтруктураСотрудника = СтруктураСотрудника();
		СтруктураСотрудника.Сотрудник		= СтрокаИстории.Ключ;
		СтруктураСотрудника.Организация		= СтрокаИстории.Значение.Организация;
		СтруктураСотрудника.Подразделение	= СтрокаИстории.Значение.Подразделение;
		СтруктураСотрудника.Должность		= СтрокаИстории.Значение.Должность;
		СтруктураСотрудника.ФизическоеЛицо	= СтрокаИстории.Значение.ФизическоеЛицо;
		Если ОснованиеЗадачи = "Увольнение" Тогда
			СтруктураСотрудника.Дата = Формат(ДатаОснования, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		Результат.Добавить(СтруктураСотрудника);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураСотрудника()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Сотрудник",		Справочники.Сотрудники.ПустаяСсылка());
	Результат.Вставить("Организация",	Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("Подразделение",	Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Результат.Вставить("Должность",		Справочники.Должности.ПустаяСсылка());
	Результат.Вставить("Дата",			Неопределено);
	Результат.Вставить("Системы",		Новый Массив);
	Результат.Вставить("Продуктивный",	Ложь);
	Результат.Вставить("ФизическоеЛицо",Справочники.ФизическиеЛица.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

Функция КадроваяИстория(МассивСотрудников)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадроваяИстория.Сотрудник КАК Сотрудник,
		|	КадроваяИстория.Должность КАК Должность,
		|	КадроваяИстория.Организация КАК Организация,
		|	КадроваяИстория.Подразделение КАК Подразделение,
		|	КадроваяИстория.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&Дата, Сотрудник В (&Сотрудники)) КАК КадроваяИстория";
	
	Запрос.УстановитьПараметр("Дата",		ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Сотрудники",	МассивСотрудников);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураИстории = Новый Структура;
		СтруктураИстории.Вставить("Организация",	Выборка.Организация);
		СтруктураИстории.Вставить("Подразделение",	Выборка.Подразделение);
		СтруктураИстории.Вставить("ФизическоеЛицо",	Выборка.ФизическоеЛицо);
		СтруктураИстории.Вставить("Должность",		Выборка.Должность);
		
		Результат.Вставить(Выборка.Сотрудник, СтруктураИстории);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция МассивОтсутствий(ОтпускиИсточника)
	
	Результат = Новый Массив;
	
	Для Каждого Отпуск Из ОтпускиИсточника Цикл
		СтруктураОтсутствия = Новый Структура("Сотрудник, Начало, Конец");
		СтруктураОтсутствия.Сотрудник = Отпуск.Сотрудник;
		Если ТипЗнч(Отпуск) = Тип("ДокументОбъект.Отпуск") Тогда
			СтруктураОтсутствия.Начало	= Отпуск.НачалоОтпуска;
			СтруктураОтсутствия.Конец	= Отпуск.ОкончаниеОтпуска;
		Иначе
			СтруктураОтсутствия.Начало	= Отпуск.ДатаНачала;
			СтруктураОтсутствия.Конец	= Отпуск.ДатаОкончания;
		КонецЕсли;
		Результат.Добавить(СтруктураОтсутствия);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция СтруктураПолейПользовательBitrix24(ПользовательИД, ФизическоеЛицо, КонтактнаяИнформация)
	
	Результат = Новый Структура;
	
	ВидыКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации;
	
	Результат.Вставить("ID",				ПользовательИД);
	Результат.Вставить("NAME",				ФизическоеЛицо.Имя);
	Результат.Вставить("LAST_NAME",			ФизическоеЛицо.Фамилия);
	Результат.Вставить("SECOND_NAME",		ФизическоеЛицо.Отчество);
	Результат.Вставить("PERSONAL_BIRTHDAY",	ФизическоеЛицо.ДатаРождения); 
	Результат.Вставить("PERSONAL_PHONE",	КонтактнаяИнформация[ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица]);
	Результат.Вставить("PERSONAL_MOBILE",	КонтактнаяИнформация[ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица]);
	Результат.Вставить("WORK_PHONE",		КонтактнаяИнформация[ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица]);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураПолейСмартЭлементBitrix24(СтруктураСотрудника, Инициатор, ОснованиеЗадачи, Источник, Контакты)
	
	Результат = Новый Структура;
	
	ФизическоеЛицо	= СтруктураСотрудника.ФизическоеЛицо;
	Контакты		= Справочники.ФизическиеЛица.КонтактнаяИнформация(ФизическоеЛицо);
	
	ИмяИсточник		= СтрШаблон(ШаблоныИмяДокумента()[ОснованиеЗадачи], Источник.Номер);
	Описание		= СтрШаблон(ШаблоныОписания()[ОснованиеЗадачи], ФизическоеЛицо.Наименование, ИмяИсточник);                                
	
	МассивСистем	= Новый Массив;
	ТаблицаСистем	= ТаблицаСистем(СтруктураСотрудника.Должность);
	Результат.Вставить("ufCrm17_1721381992", Ложь);
	Для Каждого Строка Из ТаблицаСистем Цикл
		
		Если Строка.Категория = Перечисления.Б_КатегорияПерсонала.Продуктивный Тогда
			Результат.Вставить("ufCrm17_1721381992", Истина);
		КонецЕсли;
		
		Если Строка.Доступ Тогда
			МассивСистем.Добавить(ИндификаторыСистем()[Строка.Система]);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивСистем) Тогда
		Результат.Вставить("ufCrm_6697891B6EA4F", МассивСистем);
	КонецЕсли;
	
	Результат.Вставить("assignedById",		    Инициатор);
	Результат.Вставить("createdBy",				Инициатор);
	Результат.Вставить("ufCrm17_1710907129",	Инициатор);
	Результат.Вставить("ufCrm17_1710149516505",	ФизическоеЛицо.Фамилия);
	Результат.Вставить("ufCrm17_1710149525089",	ФизическоеЛицо.Имя);
	Результат.Вставить("ufCrm17_1710149531863",	ФизическоеЛицо.Отчество);
	Результат.Вставить("ufCrm17_1712911355",	НаименованияОрганизаций()[Строка(СтруктураСотрудника.Организация)]);
	Результат.Вставить("ufCrm17_1712911639",	Строка(СтруктураСотрудника.Подразделение));
	Результат.Вставить("ufCrm17_1721366876",	Строка(СтруктураСотрудника.Должность));
	Результат.Вставить("ufCrm17_1725873765",	ФизическоеЛицо.ДатаРождения);
	Результат.Вставить("ufCrm17_1710148969359",	ИндификаторыПричин()["Новый пользователь"]);
	
	Если ОснованиеЗадачи = "Увольнение" Тогда
		Результат.Вставить("ufCrm17_1725874102", СтруктураСотрудника.Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо.Пол) Тогда
		Результат.Вставить("ufCrm17_1727169814", ИндификаторыПола()[ФизическоеЛицо.Пол]);
	КонецЕсли;
	
	НомерТелефона = Контакты[Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица];
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		Результат.Вставить("ufCrm17_1727841941", ОчиститьНомерТелефона(НомерТелефона));
	КонецЕсли;
	
	Результат.Вставить("ufCrm17_1727170073", ИндификаторыОснований()[ОснованиеЗадачи]);
	Результат.Вставить("ufCrm17_1710914698", Описание);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураПолейЗадача(СтруктураСотрудника, Инициатор, ОснованиеЗадачи, Источник)
	
	Результат = Новый Структура;
	
	ФизическоеЛицо	= СтруктураСотрудника.ФизическоеЛицо;	
	Продуктивный	= Ложь;
	Системы1С		= Системы1С();
	
	МассивСистем = Новый Массив;
	Для Каждого Строка Из ТаблицаСистем(СтруктураСотрудника.Должность) Цикл
		
		Если Строка.Категория = Перечисления.Б_КатегорияПерсонала.Продуктивный Тогда
			Продуктивный = Истина;
		КонецЕсли;
		
		Если Строка.Доступ И Системы1С.Найти(Строка.Система) Тогда
			МассивСистем.Добавить(ИндификаторыСистем()[Строка.Система]);
		КонецЕсли;
		
	КонецЦикла;
	
	Системы = "";
	Если ЗначениеЗаполнено(МассивСистем) Тогда
		Системы = СтрСоединить(МассивСистем, ", ");
	КонецЕсли;
	
	ИмяИсточник = СтрШаблон(ШаблоныИмяДокумента()[ОснованиеЗадачи], Источник.Номер);
	Заголовок = СтрШаблон("Необходимо заблокировать пользователя %1", ФизическоеЛицо.Наименование);
	Описание = СтрШаблон(
		ШаблоныОписания()["Задача"], 
		ФизическоеЛицо.Наименование, 
		СтруктураСотрудника.Организация,
		СтруктураСотрудника.Подразделение,
		ИмяИсточник, 
		Продуктивный,
		Системы);                                
	
	Результат.Вставить("CREATED_BY",		Инициатор);
	Результат.Вставить("TITLE",				Заголовок);
	Результат.Вставить("DESCRIPTION",		Описание);
	Результат.Вставить("GROUP_ID",			"49");
	Результат.Вставить("RESPONSIBLE_ID",	Инициатор);
	
	Возврат Результат;
	
КонецФункции

Функция Системы1С()
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.Б_ИнформационныеСистемы.АА6);
	Результат.Добавить(Перечисления.Б_ИнформационныеСистемы.ДО);
	Результат.Добавить(Перечисления.Б_ИнформационныеСистемы.ЗУПКОРП);
	
	Возврат Результат;
	
КонецФункции

Функция ШаблоныОписания()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("Прием",		"Создать пользователя для %1 на основании ""%2""");
	Результат.Вставить("Перевод",	"Изменить пользователя %1 на основании ""%2""");
	Результат.Вставить("Увольнение","Забокировать пользователя %1 на основании ""%2""");
	Результат.Вставить("Задача",	"Пользователь:	%1 
									|Организация:	%2
									|Подразделение:	%3
									|Основание:		%4
									|Продуктивный:	%5
									|Базы:			%6");
	
	Возврат Результат;
	
КонецФункции

Функция ШаблоныИмяДокумента()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("Прием",		"Прием на работу %1");
	Результат.Вставить("Перевод",	"Кадровый перевод %1");
	Результат.Вставить("Увольнение","Увольнение %1");
	Результат.Вставить("Задача",	"Увольнение %1");
	
	Возврат Результат;
	
КонецФункции

Функция РоботИД()
	Возврат РегистрСведений.Б_СоовтетствиеИДПользователей.СоответствиеПользователей()["Робот"];
КонецФункции

Функция ФизическоеЛицоИД(ФизическоеЛицо, Настройки, Контакты)
	
	Результат = "";
	
	Фильтр = ФильтрПоЭлектроннойПочте(Контакты);
	ПользователиBitrix24 = Новый Соответствие;
	Если ЗначениеЗаполнено(Фильтр) Тогда
		ПользователиBitrix24 = OPI_Bitrix24.НайтиСписокПользователей(Настройки.URL, Фильтр)["result"];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПользователиBitrix24) Тогда
		Результат = ПользователиBitrix24[0]["ID"];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СекцияКалендаряИД(ВладелецИД, Настройки)
	
	Результат = "";
	
	СекцииКалендаря = OPI_Bitrix24.ПолучитьСекцииКалендаря(Настройки.URL, ВладелецИД)["result"];
		
	Если ЗначениеЗаполнено(СекцииКалендаря) Тогда
		Результат = СекцииКалендаря[0]["ID"];
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаСистем(Должность)
	
	Результат = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеСистемИДолжностей.Система КАК Система,
		|	СоответствиеСистемИДолжностей.Категория КАК Категория,
		|	СоответствиеСистемИДолжностей.Доступ КАК Доступ
		|ИЗ
		|	РегистрСведений.Б_СоответствиеСистемИДолжностей КАК СоответствиеСистемИДолжностей
		|ГДЕ
		|	СоответствиеСистемИДолжностей.Должность = &Должность";
	
	Запрос.УстановитьПараметр("Должность", Должность);
	
	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат;
	
КонецФункции

Функция ИндификаторыПола()
	Возврат РегистрСведений.Б_СоответствиеИДПолов.СоответствиеПола();
КонецФункции

Функция ИндификаторыОснований()
	Возврат РегистрСведений.Б_СоответствиеИДОснований.СоответствиеОснований();
КонецФункции

Функция ИндификаторыПричин()
	Возврат РегистрыСведений.Б_СоответствиеИДПричин.СоответствиеПричин();
КонецФункции

Функция ИндификаторыСистем()
	Возврат РегистрСведений.Б_СоответствиеИДСистем.СоответствиеСистем();
КонецФункции

Функция НаименованияОрганизаций()
	Возврат РегистрСведений.Б_СоответствиеНаименованийОрганизаций.СоответствиеНаименований();
КонецФункции

Функция СоответствиеНаимнованияПолей()
	Возврат РегистрСведений.Б_СоответствиеНаимнованияПолей.СоответствиеНаименований();
КонецФункции

Функция ОчиститьНомерТелефона(НомерТелефона)
	
	Результат = "";
	
	Результат = СтрСоединить(СтрРазделить(НомерТелефона, СтрСоединить(СтрРазделить(НомерТелефона, "0123456789"))));
	Если СтрНачинаетсяС(Результат, "8") Тогда
		Результат = "+7" + Сред(Результат, 2);
	ИначеЕсли СтрНачинаетсяС(Результат, "9") Тогда
		Результат = "+7" + Результат;
	Иначе
		Результат = "+" + Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
